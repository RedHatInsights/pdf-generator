import { ServiceCallFunction, ServiceDescriptor } from '../call-service';
import ServiceNames from '../../../common/service-names';
import { vulnerabilitiesSystemData, vulnerabilityData } from './data';
import cveData from './cve-data.json';
import { CVEDataItem } from '../../../templates/vulnerability/cve-report/Template';
import config from '../../../common/config';
import axios, { AxiosRequestHeaders } from 'axios';

const BASE_URL = `https://${config?.endpoints['vulnerability-engine-manager-service']?.hostname}:${config?.endpoints['vulnerability-engine-manager-service']?.port}/api/vulnerability/v1`;
const CVES_ENDPOINT = '/vulnerabilities/cves';
const SYSTEMS_ENPOINT = '/vulnerabilities/systems';
const EXECUTIVE_ENDPOINT = '/vulnerabilities/report/executive'; // need to verify the correct endpoint

const systemsGetMock: ServiceCallFunction = () =>
  Promise.resolve({ data: vulnerabilitiesSystemData });
const systemsResponseProcessor = (data: typeof vulnerabilitiesSystemData) =>
  data;

const vulnerabilitiesExecutiveGetMock: ServiceCallFunction = () =>
  Promise.resolve(vulnerabilityData);
const vulnerabilitiesExecutiveResponseProcessor = (
  data: typeof vulnerabilityData
) => data;

const cveGetMock = () => Promise.resolve(cveData);
const cveResposeProcessor = (data: { data: CVEDataItem[] }) => data;

const systemsRequest = (
  headers: AxiosRequestHeaders,
  { params }: Record<string, any>
) => {
  const defaultParams = {
    page: 1,
    page_size: Math.min(Number.MAX_SAFE_INTEGER, 999999999999999),
    date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc',
    ...params,
  };

  return axios.get(`${BASE_URL}${SYSTEMS_ENPOINT}`, {
    headers,
    params: defaultParams,
  });
};

const cvesRequest = (
  headers: AxiosRequestHeaders,
  { params }: Record<string, any>
) => {
  const defaultParams = {
    page: 1,
    page_size: Math.min(Number.MAX_SAFE_INTEGER, 9007199254740991),
    date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc',
    ...params,
  };

  return axios.get(`${BASE_URL}${CVES_ENDPOINT}`, {
    headers,
    params: defaultParams,
  });
};

const executiveRequest = (
  headers: AxiosRequestHeaders,
  { params }: Record<string, any>
) => {
  const defaultParams = {
    page: 1,
    page_size: Math.min(Number.MAX_SAFE_INTEGER, 9007199254740991),
    date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc',
    ...params,
  };

  return axios.get(`${BASE_URL}${EXECUTIVE_ENDPOINT}`, {
    headers,
    params: defaultParams,
  });
};

const vulnerabilityDescriptor: ServiceDescriptor = {
  templates: {
    executive: {
      service: ServiceNames.vulnerability,
      path: '/',
      mock: vulnerabilitiesExecutiveGetMock,
      responseProcessor: vulnerabilitiesExecutiveResponseProcessor,
      request: executiveRequest,
    },
    systems: {
      service: ServiceNames.vulnerability,
      path: '/',
      mock: systemsGetMock,
      responseProcessor: systemsResponseProcessor,
      request: systemsRequest,
    },
    cve: {
      service: ServiceNames.vulnerability,
      path: '/',
      mock: cveGetMock,
      responseProcessor: cveResposeProcessor,
      request: cvesRequest,
    },
  },
};

export default vulnerabilityDescriptor;
