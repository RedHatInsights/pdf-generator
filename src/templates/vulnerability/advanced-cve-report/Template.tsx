/* eslint-disable @typescript-eslint/no-unsafe-call */
import React from 'react';
import PropTypes from 'prop-types';
import {
  Text,
  TextContent,
  TextVariants,
  Title,
  Page as PattenflyPage,
  PageSection,
  PageSectionVariants,
  DescriptionList,
  DescriptionListTerm,
  DescriptionListGroup,
  DescriptionListDescription,
} from '@patternfly/react-core';
import sanitizeHtml from 'sanitize-html';
import Page from '../../common/page';
import CVETable, { CVETableRow } from '../Components/cve-table';

type ApiPayload = {
  id: string;
  attributes: any;
};

export type AdvancedCveReportDataItem = {
  apiPayload: ApiPayload[];
  params: object;
};

export type ReportConfig = {
  reportTitle: string;
  activeTags: string;
  filtersUsedMessage: string;
  userNotes: string;
  creator: string;
  columnsToInclude: string[];
};

export const advancedCVEReportColumns = [
  {
    title: 'CVE ID',
    apiKey: 'id',
    colKey: 'id',
  },
  {
    title: 'Publish date',
    apiKey: 'public_date',
    colKey: 'publish_date',
  },
  {
    title: 'CVSS base score',
    apiKey: 'cvss2_score',
    colKey: 'cvss_filter',
  },
  {
    title: 'Severity',
    apiKey: 'impact',
    colKey: 'impact',
  },
  {
    title: 'Systems',
    apiKey: 'systems_affected',
    colKey: 'affecting',
  },
  {
    title: 'Business risk',
    apiKey: 'business_risk',
    colKey: 'business_risk_id',
  },
  {
    title: 'Status',
    apiKey: 'status',
    colKey: 'status_id',
  },
];

const CVETables = ({
  data,
  columnsToInclude,
}: {
  data: ApiPayload[];
  columnsToInclude: string[];
}) => {
  // ID column should be always present;
  columnsToInclude = ['id', ...columnsToInclude];

  const rows: CVETableRow[] = data.map(
    ({
      id,
      attributes: {
        public_date,
        cvss3_score,
        cvss2_score,
        systems_affected,
        ...rest
      },
    }) => {
      const date = new Date(public_date);

      const result: any = [];
      columnsToInclude.forEach((col) => {
        const currColumn = advancedCVEReportColumns.find(
          (column) => column.colKey === col
        );

        if (!currColumn) {
          return;
        }

        let rowColumn;
        switch (col) {
          case 'id':
            rowColumn = (
              <a
                key="link"
                href={`https://console.stage.redhat.com/beta/insights/vulnerability/cves/${id}?page=1&page_size=20&show_advisories=true&sort=-updated`}
              >
                {id}
              </a>
            );
            break;

          case 'publish_date':
            rowColumn = date.toLocaleString('us', {
              day: 'numeric',
              month: 'short',
              year: 'numeric',
            });
            break;
          case 'cvss_filter':
            rowColumn = parseFloat(cvss3_score || cvss2_score).toFixed(1);
            break;
          default:
            rowColumn = rest[currColumn.apiKey] || 'Unknown';
        }

        if (rowColumn) {
          result.push(rowColumn);
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return result;
      });

      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      return result;
    }
  );

  const columnTitles: string[] = columnsToInclude
    .filter((col) =>
      advancedCVEReportColumns.find((column) => column.colKey === col)
    )
    .map(
      (col) =>
        advancedCVEReportColumns.find((column) => column.colKey === col)
          ?.title || col
    );

  return <CVETable rows={rows} columnsToInclude={columnTitles} />;
};
const Template = ({
  apiData: { data, meta },
  reportConfig,
}: {
  apiData: { data: ApiPayload[]; meta: any };
  reportConfig: ReportConfig;
}) => {
  const filtersUsedMessage = sanitizeHtml(reportConfig.filtersUsedMessage);

  return (
    <Page>
      <Title
        headingLevel="h1"
        className="pf-u-danger-color-200 pf-u-font-size-4xl pf-u-mb-lg"
      >
        {reportConfig.reportTitle || 'Insights Vulnerability CVE report'}
      </Title>
      <TextContent>
        <Text>
          This is a summary of CVEs identified by Red Hat that may impact your
          Red Hat Enterprise Linux (RHEL) systems.
        </Text>
        <Text>
          {reportConfig.filtersUsedMessage && (
            <div
              dangerouslySetInnerHTML={{
                __html: filtersUsedMessage,
              }}
            />
          )}
        </Text>
        {reportConfig.activeTags && (
          <Text component={TextVariants.p}>{reportConfig.activeTags}</Text>
        )}
        <Text>
          The vulnerability service identified {meta.total_items} CVEs within
          this criteria that impact at least one of your {meta.system_count}{' '}
          analyzed RHEL systems.
        </Text>
        {reportConfig.userNotes && (
          <PattenflyPage>
            <PageSection variant={PageSectionVariants.dark}>
              <DescriptionList>
                <DescriptionListGroup>
                  <DescriptionListTerm>User notes</DescriptionListTerm>
                  <DescriptionListDescription>
                    {reportConfig.userNotes}
                  </DescriptionListDescription>
                </DescriptionListGroup>
              </DescriptionList>
              <Text>
                Report generated by <b>{reportConfig.creator}</b>
              </Text>
            </PageSection>
          </PattenflyPage>
        )}
      </TextContent>
      <CVETables data={data} columnsToInclude={reportConfig.columnsToInclude} />
    </Page>
  );
};

Template.defaultProps = {
  user: undefined,
};

Template.propTypes = {
  intl: PropTypes.any,
  filters: PropTypes.array,
  data: PropTypes.object,
  meta: PropTypes.object,
  reportData: PropTypes.object,
  isReportDynamic: PropTypes.bool,
  user: PropTypes.object,
  type: PropTypes.string,
};

export default Template;
