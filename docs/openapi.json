{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "CRC PDF Generator",
    "contact": {
      "name": "RedHatInsights",
      "email": "support@redhat.com"
    },
    "description": "CRC PDF Generator API Documentation",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "/api/crc-pdf-generator"
    }
  ],
  "tags": [
    {
      "name": "health",
      "description": "related to getting the status of the API"
    },
    {
      "name": "pdf",
      "description": "related to previewing or generating a PDF"
    }
  ],
  "paths": {
    "/v1/hello": {
      "get": {
        "tags": [
          "health"
        ],
        "operationId": "v1Hello",
        "summary": "Returns hello world",
        "description": "Hello world endpoint",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "html": {
                    "value": "<h1>it's alive</h1>"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v2/create": {
      "post": {
        "tags": [
          "pdf"
        ],
        "operationId": "createPdf",
        "description": "Generate a PDF from a predefined template",
        "requestBody": {
          "description": "Body containing template data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PdfDetails"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/GeneratingPdfId"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v2/status/{statusID}": {
      "get": {
        "tags": [
          "pdf"
        ],
        "operationId": "getPdfStatus",
        "parameters": [
          {
            "name": "statusID",
            "in": "path",
            "description": "ID of Pdf Collection",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "description": "Fetch the status of a PDF by the ID",
        "responses": {
          "200": {
            "$ref": "#/components/responses/PdfCollection"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/v2/download/{ID}": {
      "get": {
        "tags": [
          "pdf"
        ],
        "operationId": "downloadPdf",
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "ID of Pdf Collection to be downloaded",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "description": "Fetch the rendered PDF by the ID",
        "responses": {
          "200": {
            "$ref": "#/components/responses/RenderedPdf"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "Unauthorized": {
        "description": "Insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error403"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error400"
            }
          }
        }
      },
      "NotFound": {
        "description": "404 Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error404"
            }
          }
        }
      },
      "InternalError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error500"
            }
          }
        }
      },
      "RenderedPdf": {
        "description": "Returns a PDF generated based on the service and template in the query string",
        "content": {
          "application/pdf": {
            "schema": {
              "$ref": "#/components/schemas/RenderedPdf"
            }
          }
        }
      },
      "GeneratingPdfId": {
        "description": "Returns a status Id for the PDF being generated",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PdfStatusId"
            }
          }
        }
      },
      "PdfCollection": {
        "description": "Returns a status object for the PDF being generated",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PdfCollection"
            }
          }
        }
      }
    },
    "schemas": {
      "Error403": {
        "type": "object",
        "description": "Error schema for 403 HTTP code",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Error400": {
        "type": "object",
        "description": "Error schema for 400 HTTP code",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              },
              "statusText": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          }
        }
      },
      "Error404": {
        "type": "object",
        "description": "Error schema for 404 HTTP code",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              },
              "statusText": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          }
        }
      },
      "Error500": {
        "type": "object",
        "description": "Error schema for 500 HTTP code",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              },
              "statusText": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          }
        }
      },
      "PdfDetail": {
        "type": "object",
        "description": "Payload shape for generating a PDF",
        "required": [
          "manifestLocation",
          "scope",
          "module"
        ],
        "properties": {
          "manifestLocation": {
            "type": "string",
            "description": "path of the manifest"
          },
          "scope": {
            "type": "string",
            "description": "scope of the request"
          },
          "module": {
            "type": "string",
            "description": "federated module name"
          }
        },
        "example": {
          "manifestLocation": "/apps/landing/fed-mods.json",
          "scope": "landing",
          "module": "./PdfEntry"
        }
      },
      "PdfDetails": {
        "type": "object",
        "required": [
          "payload"
        ],
        "properties": {
          "payload": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PdfDetail"
            },
            "description": "Schema entry for the payload of creating a Pdf"
          }
        }
      },
      "PdfStatusId": {
        "description": "Identifier used to keep track of a Pdf collection through the system",
        "type": "object",
        "properties": {
          "statusID": {
            "type": "string"
          }
        },
        "example": {
          "statusID": "11011101"
        }
      },
      "PdfComponent": {
        "type": "object",
        "description": "Status object for a single pdf component",
        "required": [
          "status",
          "filepath",
          "collectionId",
          "componentId"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PdfStatus"
          },
          "filepath": {
            "type": "string"
          },
          "collectionId": {
            "type": "string"
          },
          "componentId": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "numPages": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PdfComponentGroup": {
        "description": "Tracks multiple Pdf components",
        "type": "object",
        "required": [
          "components",
          "status"
        ],
        "properties": {
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PdfComponent"
            }
          },
	  "expectedLength": {
            "type": "number"
	  },
          "status": {
            "$ref": "#/components/schemas/PdfStatus"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "PdfCollection": {
        "type": "object",
        "description": "Tracks the status for the entire collection",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PdfComponentGroup"
          }
        },
        "example": {
          "status": {
            "components": [
              {
                "collectionId": "01197696-ca1b-4beb-80d2-6501126cb89e",
                "status": "Generated",
                "filepath": "/tmp/report_78584d8d-c5b9-444d-b2eb-b7ffc640d620.pdf",
                "componentId": "78584d8d-c5b9-444d-b2eb-b7ffc640d620"
              },
              {
                "collectionId": "01197696-ca1b-4beb-80d2-6501126cb89e",
                "status": "Generated",
                "filepath": "/tmp/report_99b81a67-a9f5-4a1e-82aa-1ef1840bce28.pdf",
                "componentId": "99b81a67-a9f5-4a1e-82aa-1ef1840bce28"
              }
            ],
            "status": "Generated"
          }
        }
      },
      "PdfStatusEnum": {
        "type": "string",
        "enum": [
              "Generating",
              "Generated",
              "Failed",
              "NotFound"
            ]
      },
      "PdfStatus": {
        "type": "string",
        "description": "enum of all possible status types a Pdf can have",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PdfStatusEnum"
          }
        }
      },
      "RenderedPdf": {
        "description": "Pdf stream returned as media type pdf",
        "type": "string",
        "format": "binary"
      }
    }
  }
}
